% /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/ext/chat80/original/lex.xg:94
% info(read(30,/.../(original,'lex.xg'))).


** Grammar from file /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/ext/chat80/original/lex.xg: 265 words .. **

% /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/ext/chat80/original/clone.xg:466
% info(read(140,/.../(original,'clone.xg'))).


** Grammar from file /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/ext/chat80/original/clone.xg: 223 words .. **

% init_why(before_boot,after(/.../(original,'load.pl'))).
% % From unknown:0
% init_why(after_boot,program).
?- hi80(demo).
------------------------------------------------------

trace .
Tracing from now on!
------------------------------------------------------

which rivers are not in asia ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               river),
            []),
         verb(be, active, pres+fin, [],
            neg),
         [ arg(pred,
              prep_phrase(prep(in),
                 np(3+sin,
                    name(asia),
                    []))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([River]) :-
   (river(River) ,
    '\+'(in(River,asia))).

Planning: 0.0sec.
answer([River]) :-
   (river(River) ,
    {}('\+'(in(River,asia)))).
-----------
amazon, colorado, congo_river, cubango, danube, elbe, limpopo, mackenzie, mississippi, murray, niger_river, nile, oder, orange, orinoco, parana, rhine, rhone, rio_grande, senegal_river, tagus, vistula, volta, yukon and zambesi.

Reply: 0.0sec.
------------------------------------------------------

which is the largest african country ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(the(sin)),
                    [ sup(most,
                         adj(large)),
                      adj(african) ],
                    country),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Aggregate]) :-
   '^'(Setof,
      (setof(
          Area:African_Country,
          (country(African_Country) ,
           (area(African_Country,Area) ,
            african(African_Country))),
          Setof) ,
       aggregate(max,Setof,Aggregate))).

Planning: 0.0sec.
answer([Aggregate]) :-
   '^'(Setof,
      (setof(
          Area:Country_African,
          (african(Country_African) ,
           ({}(country(Country_African)) ,
            area(Country_African,Area))),
          Setof) ,
       aggregate(max,Setof,Aggregate))).
-----------
sudan.

Reply: 0.0sec.
------------------------------------------------------

which country ' s capital is london ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+sin,
            np_head(
               det(the(sin)),
               [],
               capital),
            [ prep_phrase(poss,
                 np(3+sin,
                    np_head(
                       int_det(Det),
                       [],
                       country),
                    [])) ]),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 name(london),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Country]) :-
   (country(Country) ,
    capital(Country,london)).

Planning: 0.0sec.
answer([Country]) :-
   (capital(Country,london) ,
    {}(country(Country))).
-----------
united_kingdom.

Reply: 0.0sec.
------------------------------------------------------

which country bordering the mediterranean borders a country that is bordered
by a country whose population exceeds the population of india ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+sin,
            np_head(
               int_det(Det),
               [],
               country),
            [ reduced_rel(Wh,
                 s(np(3+sin,
                       wh(Wh),
                       []),
                    verb(border, active, inf,
                       [prog],
                       pos),
                    [ arg(dir,
                         np(3+sin,
                            name(mediterranean),
                            [])) ],
                    [])) ]),
         verb(border, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    country),
                 [ rel(Wh2,
                      s(np(3+sin,
                            wh(Wh2),
                            []),
                         verb(border, passive, pres+fin, [],
                            pos),
                         [],
                         [ prep_phrase(prep(by),
                              np(3+sin,
                                 np_head(
                                    det(a),
                                    [],
                                    country),
                                 [ rel(Wh3,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+sin,
                                                    wh(Wh3),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    det(the(sin)),
                                                    [],
                                                    population),
                                                 [ prep_phrase(prep(of),
                                                      np(3+sin,
                                                         name(india),
                                                         [])) ])) ],
                                         [])) ])) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Country]) :-
   (country(Country) ,
    (borders(Country,mediterranean) ,
     '^'(Borders_Country1,
        (country(Borders_Country1) ,
         ('^'(Country2,
             (country(Country2) ,
              ('^'(Population,
                  (population(Country2,Population) ,
                   '^'(Exceeds_Population4,
                      (population(india,Exceeds_Population4) ,
                       exceeds(Population,Exceeds_Population4))))) ,
               borders(Country2,Borders_Country1)))) ,
          borders(Country,Borders_Country1)))))).

Planning: 0.0sec.
answer([Country]) :-
   '^'(Country_Borders,
      '^'(Country4,
         '^'(Population5,
            '^'(Exceeds_Population,
               (population(india,Exceeds_Population) ,
                (borders(Country,mediterranean) ,
                 ({}(country(Country)) ,
                  {}((borders(Country,Country_Borders) ,
                      ({}(country(Country_Borders)) ,
                       {}((borders(Country4,Country_Borders) ,
                           ({}(country(Country4)) ,
                            {}((population(Country4,Population5) ,
                                {}(exceeds(Population5,Exceeds_Population))))))))))))))))).
-----------
turkey.

Reply: 0.0009999999999998899sec.
------------------------------------------------------

which countries with a population exceeding 10 million border the atlantic
?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            [ prep_phrase(prep(with),
                 np(3+sin,
                    np_head(
                       det(a),
                       [],
                       population),
                    [ reduced_rel(Wh,
                         s(np(3+sin,
                               wh(Wh),
                               []),
                            verb(exceed, active, inf,
                               [prog],
                               pos),
                            [ arg(dir,
                                 np(3+plu,
                                    np_head(
                                       quant(same,
                                          nb(10)),
                                       [],
                                       million),
                                    [])) ],
                            [])) ])) ]),
         verb(border, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 name(atlantic),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Country]) :-
   ('^'(Population,
       (population(Country,Population) ,
        (exceeds(Population,
            10--million) ,
         country(Country)))) ,
    borders(Country,atlantic)).

Planning: 0.0sec.
answer([Country]) :-
   '^'(Population,
      (borders(Country,atlantic) ,
       ({}((population(Country,Population) ,
            {}(exceeds(Population,
                  10--million)))) ,
        {}(country(Country))))).
-----------
venezuela.

Reply: 0.0sec.
------------------------------------------------------

which countries have a population exceeding 10 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(have, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    population),
                 [ reduced_rel(Wh,
                      s(np(3+sin,
                            wh(Wh),
                            []),
                         verb(exceed, active, inf,
                            [prog],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(same,
                                       nb(10)),
                                    [],
                                    million),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.001000000000000112sec.
answer([Country]) :-
   (country(Country) ,
    '^'(Population,
       (exceeds(Population,
           10--million) ,
        population(Country,Population)))).

Planning: 0.0sec.
answer([Country]) :-
   '^'(Population,
      (country(Country) ,
       {}((population(Country,Population) ,
           {}(exceeds(Population,
                 10--million)))))).
-----------
malaysia and uganda.

Reply: 0.0009999999999998899sec.
------------------------------------------------------

which countries contain more than 3 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(more,
                       nb(3)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    '^'(Numberof,
       (numberof(City,
           (city(City) ,
            in(City,In_Country)),
           Numberof) ,
        Numberof>3))).

Planning: 0.0sec.
answer([Country_In]) :-
   '^'(Numberof,
      (numberof(City,
          (city(City) ,
           in(City,Country_In)),
          Numberof) ,
       ({}(Numberof>3) ,
        {}(country(Country_In))))).
-----------
india and united_states.

Reply: 0.0sec.
------------------------------------------------------

which countries contain more than 2 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(more,
                       nb(2)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    '^'(Numberof,
       (numberof(City,
           (city(City) ,
            in(City,In_Country)),
           Numberof) ,
        Numberof>2))).

Planning: 0.0sec.
answer([Country_In]) :-
   '^'(Numberof,
      (numberof(City,
          (city(City) ,
           in(City,Country_In)),
          Numberof) ,
       ({}(Numberof>2) ,
        {}(country(Country_In))))).
-----------
italy, soviet_union and united_kingdom.

Reply: 0.0sec.
------------------------------------------------------

which countries contain less than 2 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(less,
                       nb(2)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    '^'(Numberof,
       (numberof(City,
           (city(City) ,
            in(City,In_Country)),
           Numberof) ,
        Numberof<2))).

Planning: 0.0sec.
answer([Country_In]) :-
   '^'(Numberof,
      (numberof(City,
          (city(City) ,
           in(City,Country_In)),
          Numberof) ,
       ({}(Numberof<2) ,
        {}(country(Country_In))))).
-----------
argentina, austria, belgium, chile, east_germany, egypt, france, greece, hungary, indonesia, iran, mexico, pakistan, peru, philippines, poland, romania, singapore, south_africa, thailand, turkey, venezuela, vietnam and west_germany.

Reply: 0.001000000000000112sec.
------------------------------------------------------

which countries contain a city ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    '^'(City,
       (city(City) ,
        in(City,In_Country)))).

Planning: 0.0sec.
answer([Country_In]) :-
   '^'(City,
      (city(City) ,
       (in(City,Country_In) ,
        {}(country(Country_In))))).
-----------
greece.

Reply: 0.001000000000000112sec.
------------------------------------------------------

which countries contain 3 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(same,
                       nb(3)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    numberof(City,
       (city(City) ,
        in(City,In_Country)), 3)).

Planning: 0.0sec.
answer([Country_In]) :-
   (numberof(City,
       (city(City) ,
        in(City,Country_In)), 3) ,
    {}(country(Country_In))).
-----------
italy, soviet_union and united_kingdom.

Reply: 0.001000000000000112sec.
------------------------------------------------------

which countries contain 2 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(same,
                       nb(2)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Country]) :-
   (country(In_Country) ,
    numberof(City,
       (city(City) ,
        in(City,In_Country)), 2)).

Planning: 0.0sec.
answer([Country_In]) :-
   (numberof(City,
       (city(City) ,
        in(City,Country_In)), 2) ,
    {}(country(Country_In))).
-----------
australia, brazil, canada, south_korea and spain.

Reply: 0.0sec.
------------------------------------------------------

which countries are european ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(pred,
              adj(european)) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([European_Country]) :-
   (country(European_Country) ,
    european(European_Country)).

Planning: 0.0sec.
answer([Country_European]) :-
   (european(Country_European) ,
    {}(country(Country_European))).
-----------
albania, andorra, austria, belgium, bulgaria, cyprus, czechoslovakia, denmark, east_germany, eire, finland, france, greece, hungary, iceland, italy, liechtenstein, luxembourg, malta, monaco, netherlands, norway, poland, portugal, romania, san_marino, spain, sweden, switzerland, united_kingdom, west_germany and yugoslavia.

Reply: 0.0sec.
------------------------------------------------------

which countries are bordered by two seas ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(border, passive, pres+fin, [],
            pos),
         [],
         [ prep_phrase(prep(by),
              np(3+plu,
                 np_head(
                    quant(same,
                       nb(2)),
                    [],
                    sea),
                 [])) ])),
   Prelogic).

Semantics: 0.0sec.
answer([Borders_Country]) :-
   (country(Borders_Country) ,
    numberof(Sea,
       (sea(Sea) ,
        borders(Sea,Borders_Country)), 2)).

Planning: 0.0sec.
answer([Country_Borders]) :-
   (numberof(Sea,
       (sea(Sea) ,
        borders(Sea,Country_Borders)), 2) ,
    {}(country(Country_Borders))).
-----------
egypt, iran, israel, saudi_arabia and turkey.

Reply: 0.0sec.
------------------------------------------------------

which continents contain more than 4 cities ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               continent),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    quant(more,
                       nb(4)),
                    [],
                    city),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Continent]) :-
   (continent(Continent) ,
    '^'(Numberof,
       (numberof(City,
           (city(City) ,
            in(City,Continent)),
           Numberof) ,
        Numberof>4))).

Planning: 0.0sec.
planned_same.
-----------
america.

Reply: 0.0009999999999998899sec.
------------------------------------------------------

which asian countries have a population exceeding 10 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [ adj(asian) ],
               country),
            []),
         verb(have, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    population),
                 [ reduced_rel(Wh,
                      s(np(3+sin,
                            wh(Wh),
                            []),
                         verb(exceed, active, inf,
                            [prog],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(same,
                                       nb(10)),
                                    [],
                                    million),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Asian_Country]) :-
   (country(Asian_Country) ,
    (asian(Asian_Country) ,
     '^'(Population,
        (exceeds(Population,
            10--million) ,
         population(Asian_Country,Population))))).

Planning: 0.0sec.
answer([Country_Asian]) :-
   '^'(Population,
      (asian(Country_Asian) ,
       ({}(country(Country_Asian)) ,
        {}((population(Country_Asian,Population) ,
            {}(exceeds(Population,
                  10--million))))))).
-----------
malaysia.

Reply: 0.0sec.
------------------------------------------------------

where is the largest country ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+sin,
            np_head(
               det(the(sin)),
               [ sup(most,
                    adj(large)) ],
               country),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(pred,
              prep_phrase(prep(in),
                 np(Np_P3,
                    np_head(
                       int_det(Det),
                       [],
                       place),
                    []))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([In_Place]) :-
   '^'(Aggregate,
      ('^'(Setof,
          (setof(
              Area:Country,
              (country(Country) ,
               area(Country,Area)),
              Setof) ,
           aggregate(max,Setof,Aggregate))) ,
       (place(In_Place) ,
        in(Aggregate,In_Place)))).

Planning: 0.0sec.
answer([Place_In]) :-
   '^'(Aggregate,
      '^'(Setof,
         (setof(
             Area:Country,
             (country(Country) ,
              area(Country,Area)),
             Setof) ,
          (aggregate(max,Setof,Aggregate) ,
           (in(Aggregate,Place_In) ,
            {}(place(Place_In))))))).
-----------
asia and northern_asia.

Reply: 0.0sec.
------------------------------------------------------

what rivers are there ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               river),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [void],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([River]) :-
   (river(River) ,
    River^true).

Planning: 0.0sec.
planned_same.
-----------
amazon, amu_darya, amur, brahmaputra, colorado, congo_river, cubango, danube, don, elbe, euphrates, ganges, hwang_ho, indus, irrawaddy, lena, limpopo, mackenzie, mekong, mississippi, murray, niger_river, nile, ob, oder, orange, orinoco, parana, rhine, rhone, rio_grande, salween, senegal_river, tagus, vistula, volga, volta, yangtze, yenisei, yukon and zambesi.

Reply: 0.0sec.
------------------------------------------------------

what percentage of countries border each ocean ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               percentage),
            [ prep_phrase(prep(of),
                 np(3+plu,
                    np_head(generic,[],country),
                    [])) ]),
         verb(border, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(each),
                    [],
                    ocean),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Borders_Ocean,Ratio]) :-
   (ocean(Borders_Ocean) ,
    '^'(Setof,
       (setof(Country,
           country(Country),
           Setof) ,
        '^'(Numberof,
           (numberof(Of,
               (one_of(Setof,Of) ,
                borders(Of,Borders_Ocean)),
               Numberof) ,
            '^'(Card,
               (card(Setof,Card) ,
                ratio(Numberof,Card,Ratio)))))))).

Planning: 0.0sec.
planned_same.
-----------
[arctic_ocean,2.5641025641025643].

Reply: 0.0sec.
------------------------------------------------------

what is the total area of countries south of the equator and not in australasia
?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(the(sin)),
                    [ adj(total) ],
                    area),
                 [ prep_phrase(prep(of),
                      np(3+plu,
                         np_head(generic,[],country),
                         [ conj(and,
                              reduced_rel(Wh1,
                                 s(np(3+plu,
                                       wh(Wh1),
                                       []),
                                    verb(be, active, pres+fin, [],
                                       pos),
                                    [ arg(pred,
                                         prep_phrase(prep(southof),
                                            np(3+sin,
                                               name(equator),
                                               []))) ],
                                    [])),
                              reduced_rel(Wh2,
                                 s(np(3+plu,
                                       wh(Wh2),
                                       []),
                                    verb(be, active, pres+fin, [],
                                       neg),
                                    [ arg(pred,
                                         prep_phrase(prep(in),
                                            np(3+sin,
                                               name(australasia),
                                               []))) ],
                                    []))) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Aggregate]) :-
   '^'(Setof,
      (setof(
          ':'(Area,
             [Country]),
          (area(Country,Area) ,
           (country(Country) ,
            (southof(Country,equator) ,
             '\+'(in(Country,australasia))))),
          Setof) ,
       aggregate(total,Setof,Aggregate))).

Planning: 0.0sec.
answer([Aggregate]) :-
   '^'(Setof,
      (setof(
          ':'(Area,
             [Country]),
          (southof(Country,equator) ,
           (area(Country,Area) ,
            ({}(country(Country)) ,
             {}('\+'(in(Country,australasia)))))),
          Setof) ,
       aggregate(total,Setof,Aggregate))).
-----------
10239 ksqmiles.

Reply: 0.0009999999999998899sec.
------------------------------------------------------

what is the ocean that borders african countries and that borders asian countries
?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(the(sin)),
                    [],
                    ocean),
                 [ conj(and,
                      rel(Wh1,
                         s(np(3+sin,
                               wh(Wh1),
                               []),
                            verb(border, active, pres+fin, [],
                               pos),
                            [ arg(dir,
                                 np(3+plu,
                                    np_head(generic,
                                       [ adj(african) ],
                                       country),
                                    [])) ],
                            [])),
                      rel(Wh2,
                         s(np(3+sin,
                               wh(Wh2),
                               []),
                            verb(border, active, pres+fin, [],
                               pos),
                            [ arg(dir,
                                 np(3+plu,
                                    np_head(generic,
                                       [ adj(asian) ],
                                       country),
                                    [])) ],
                            []))) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Ocean]) :-
   (ocean(Ocean) ,
    ('^'(Borders_African_Country,
        (country(Borders_African_Country) ,
         (african(Borders_African_Country) ,
          borders(Ocean,Borders_African_Country)))) ,
     '^'(Borders_Asian_Country4,
        (country(Borders_Asian_Country4) ,
         (asian(Borders_Asian_Country4) ,
          borders(Ocean,Borders_Asian_Country4)))))).

Planning: 0.0009999999999998899sec.
answer([Ocean]) :-
   '^'(Country_African_Borders,
      '^'(Country_Asian_Borders4,
         (ocean(Ocean) ,
          ({}((borders(Ocean,Country_African_Borders) ,
               ({}(african(Country_African_Borders)) ,
                {}(country(Country_African_Borders))))) ,
           {}((borders(Ocean,Country_Asian_Borders4) ,
               ({}(asian(Country_Asian_Borders4)) ,
                {}(country(Country_Asian_Borders4))))))))).
-----------
indian_ocean.

Reply: 0.001000000000000112sec.
------------------------------------------------------

what is the capital of upper_volta ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(the(sin)),
                    [],
                    capital),
                 [ prep_phrase(prep(of),
                      np(3+sin,
                         name(upper_volta),
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Capital]) :-
   capital(upper_volta,Capital).

Planning: 0.0sec.
answer([Capital]) :-
   capital(upper_volta,Capital).
-----------
ouagadougou.

Reply: 0.0sec.
------------------------------------------------------

what is the average area of the countries in each continent ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(the(sin)),
                    [ adj(average) ],
                    area),
                 [ prep_phrase(prep(of),
                      np(3+plu,
                         np_head(
                            det(the(plu)),
                            [],
                            country),
                         [ prep_phrase(prep(in),
                              np(3+sin,
                                 np_head(
                                    det(each),
                                    [],
                                    continent),
                                 [])) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Continent,Aggregate]) :-
   (continent(Continent) ,
    '^'(Setof,
       (setof(
           ':'(Area,
              [Country]),
           (area(Country,Area) ,
            (country(Country) ,
             in(Country,Continent))),
           Setof) ,
        aggregate(average,Setof,Aggregate)))).

Planning: 0.0sec.
planned_same.
-----------
[europe,58.84375--ksqmiles].

Reply: 0.0020000000000000018sec.
------------------------------------------------------

what is a river ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    river),
                 [])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([River]) :-
   river(River).

Planning: 0.0sec.
answer([River]) :-
   river(River).
-----------
amazon, amu_darya, amur, brahmaputra, colorado, congo_river, cubango, danube, don, elbe, euphrates, ganges, hwang_ho, indus, irrawaddy, lena, limpopo, mackenzie, mekong, mississippi, murray, niger_river, nile, ob, oder, orange, orinoco, parana, rhine, rhone, rio_grande, salween, senegal_river, tagus, vistula, volga, volta, yangtze, yenisei, yukon and zambesi.

Reply: 0.0sec.
------------------------------------------------------

what is a river that is in asia ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    river),
                 [ rel(Wh1,
                      s(np(3+sin,
                            wh(Wh1),
                            []),
                         verb(be, active, pres+fin, [],
                            pos),
                         [ arg(pred,
                              prep_phrase(prep(in),
                                 np(3+sin,
                                    name(asia),
                                    []))) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([River]) :-
   (river(River) ,
    in(River,asia)).

Planning: 0.0sec.
answer([River]) :-
   (in(River,asia) ,
    {}(river(River))).
-----------
amu_darya, amur, brahmaputra, don, euphrates, ganges, hwang_ho, indus, irrawaddy, lena, mekong, ob, salween, volga, yangtze and yenisei.

Reply: 0.0sec.
------------------------------------------------------

what countries are there in europe ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [void],
         [ prep_phrase(prep(in),
              np(3+sin,
                 name(europe),
                 [])) ])),
   Prelogic).

Semantics: 0.0sec.
answer([Country]) :-
   (country(Country) ,
    in(Country,europe)).

Planning: 0.0sec.
answer([Country]) :-
   (in(Country,europe) ,
    {}(country(Country))).
-----------
albania, andorra, austria, belgium, bulgaria, cyprus, czechoslovakia, denmark, east_germany, eire, finland, france, greece, hungary, iceland, italy, liechtenstein, luxembourg, malta, monaco, netherlands, norway, poland, portugal, romania, san_marino, spain, sweden, switzerland, united_kingdom, west_germany and yugoslavia.

Reply: 0.0sec.
------------------------------------------------------

what countries are in europe ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               country),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(pred,
              prep_phrase(prep(in),
                 np(3+sin,
                    name(europe),
                    []))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Country]) :-
   (country(Country) ,
    in(Country,europe)).

Planning: 0.0sec.
answer([Country]) :-
   (in(Country,europe) ,
    {}(country(Country))).
-----------
albania, andorra, austria, belgium, bulgaria, cyprus, czechoslovakia, denmark, east_germany, eire, finland, france, greece, hungary, iceland, italy, liechtenstein, luxembourg, malta, monaco, netherlands, norway, poland, portugal, romania, san_marino, spain, sweden, switzerland, united_kingdom, west_germany and yugoslavia.

Reply: 0.001000000000000112sec.
------------------------------------------------------

what are the countries from which a river flows into the black_sea ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    country),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(a),
                               [],
                               river),
                            []),
                         verb(flow, active, pres+fin, [],
                            pos),
                         [],
                         [ prep_phrase(prep(from),
                              np(3+plu,
                                 wh(Wh1),
                                 [])),
                           prep_phrase(prep(into),
                              np(3+sin,
                                 name(black_sea),
                                 [])) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Country,
      (country(Country) ,
       '^'(River,
          (river(River) ,
           flows(River,Country,black_sea)))),
      Setof).

Planning: 0.0sec.
answer([Setof]) :-
   setof(Country,
      '^'(River,
         (flows(River,Country,black_sea) ,
          ({}(country(Country)) ,
           {}(river(River))))),
      Setof).
-----------
[romania].

Reply: 0.0sec.
------------------------------------------------------

what are the countries from which no river flows into the black_sea ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    country),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               river),
                            []),
                         verb(flow, active, pres+fin, [],
                            pos),
                         [],
                         [ prep_phrase(prep(from),
                              np(3+plu,
                                 wh(Wh1),
                                 [])),
                           prep_phrase(prep(into),
                              np(3+sin,
                                 name(black_sea),
                                 [])) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Country,
      (country(Country) ,
       '\+'('^'(River,
               (river(River) ,
                flows(River,Country,black_sea))))),
      Setof).

Planning: 0.0sec.
answer([Setof]) :-
   setof(Country,
      (country(Country) ,
       {}('\+'('^'(River,
                  (flows(River,Country,black_sea) ,
                   {}(river(River))))))),
      Setof).
-----------
[afghanistan,albania,algeria,andorra,angola,argentina,australia,austria,bahamas,bahrain,bangladesh,barbados,belgium,belize,bhutan,bolivia,botswana,brazil,bulgaria,burma,burundi,cambodia,cameroon,canada,central_african_republic,chad,chile,china,colombia,congo,costa_rica,cuba,cyprus,czechoslovakia,dahomey,denmark,djibouti,dominican_republic,east_germany,ecuador,egypt,eire,el_salvador,equatorial_guinea,ethiopia,fiji,finland,france,french_guiana,gabon,gambia,ghana,greece,grenada,guatemala,guinea,guinea_bissau,guyana,haiti,honduras,hungary,iceland,india,indonesia,iran,iraq,israel,italy,ivory_coast,jamaica,japan,jordan,kenya,kuwait,laos,lebanon,lesotho,liberia,libya,liechtenstein,luxembourg,malagasy,malawi,malaysia,maldives,mali,malta,mauritania,mauritius,mexico,monaco,mongolia,morocco,mozambique,nepal,netherlands,new_zealand,nicaragua,niger,nigeria,north_korea,norway,oman,pakistan,panama,papua_new_guinea,paraguay,peru,philippines,poland,portugal,qatar,rwanda,san_marino,saudi_arabia,senegal,seychelles,sierra_leone,singapore,somalia,south_africa,south_korea,south_yemen,spain,sri_lanka,sudan,surinam,swaziland,sweden,switzerland,syria,taiwan,tanzania,thailand,togo,tonga,trinidad_and_tobago,tunisia,turkey,uganda,united_arab_emirates,united_kingdom,united_states,upper_volta,uruguay,venezuela,vietnam,west_germany,western_samoa,yemen,yugoslavia,zaire,zambia,zimbabwe].

Reply: 0.0020000000000000018sec.
------------------------------------------------------

what are the continents not containing a country ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ reduced_rel(Wh1,
                      s(np(3+plu,
                            wh(Wh1),
                            []),
                         verb(contain, active, inf,
                            [prog],
                            neg),
                         [ arg(dir,
                              np(3+sin,
                                 np_head(
                                    det(a),
                                    [],
                                    country),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      (continent(Continent) ,
       '\+'('^'(Country,
               (country(Country) ,
                in(Country,Continent))))),
      Setof).

Planning: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      (continent(Continent) ,
       {}('\+'('^'(Country,
                  (in(Country,Continent) ,
                   {}(country(Country))))))),
      Setof).
-----------
[antarctica].

Reply: 0.0sec.
------------------------------------------------------

what are the continents no country in which contains more than two cities
whose population exceeds 1 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               country),
                            [ prep_phrase(prep(in),
                                 np(3+plu,
                                    wh(Wh1),
                                    [])) ]),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ rel(Wh2,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh2),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      (continent(Continent) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                (in(In_Country,Continent) ,
                 '^'(Numberof,
                    (numberof(City,
                        (city(City) ,
                         ('^'(Population,
                             (population(City,Population) ,
                              exceeds(Population,
                                 1--million))) ,
                          in(City,In_Country))),
                        Numberof) ,
                     Numberof>2))))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[africa,america,antarctica,asia,australasia,europe].

Reply: 0.026000000000000023sec.
------------------------------------------------------

what are the continents in which no country contains more than two cities
whose population exceeds 1 million ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               country),
                            []),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ prep_phrase(prep(in),
                                      np(3+plu,
                                         wh(Wh1),
                                         [])),
                                   rel(Wh2,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh2),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      (continent(Continent) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                '^'(Numberof,
                   (numberof(City,
                       (city(City) ,
                        (in(City,Continent) ,
                         ('^'(Population,
                             (population(City,Population) ,
                              exceeds(Population,
                                 1--million))) ,
                          in(City,In_Country)))),
                       Numberof) ,
                    Numberof>2)))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[africa,america,antarctica,asia,australasia,europe].

Reply: 0.127sec.
------------------------------------------------------

what are the continents in which no country contains more than 3 cities ?


Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               country),
                            []),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(3)),
                                    [],
                                    city),
                                 [ prep_phrase(prep(in),
                                      np(3+plu,
                                         wh(Wh1),
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      (continent(Continent) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                '^'(Numberof,
                   (numberof(City,
                       (city(City) ,
                        (in(City,Continent) ,
                         in(City,In_Country))),
                       Numberof) ,
                    Numberof>3)))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[africa,antarctica,australasia,europe].

Reply: 0.09499999999999997sec.
------------------------------------------------------

what are the continents containing a country in which contains more than 3
cities ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ reduced_rel(Wh1,
                      s(np(3+plu,
                            wh(Wh1),
                            []),
                         verb(contain, active, inf,
                            [prog],
                            pos),
                         [],
                         [])),
                   rel(Wh2,
                      s(np(3+sin,
                            np_head(
                               det(a),
                               [],
                               country),
                            [ prep_phrase(prep(in),
                                 np(3+plu,
                                    wh(Wh2),
                                    [])) ]),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(3)),
                                    [],
                                    city),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      ('^'(_4350,
          (continent(Continent) ,
           in(_4350,Continent))) ,
       '^'(In_Country,
          (country(In_Country) ,
           (in(In_Country,Continent) ,
            '^'(Numberof,
               (numberof(City,
                   (city(City) ,
                    in(City,In_Country)),
                   Numberof) ,
                Numberof>3)))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[asia].

Reply: 1.345sec.
------------------------------------------------------

what are the capitals of the countries bordering the baltic ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    capital),
                 [ prep_phrase(prep(of),
                      np(3+plu,
                         np_head(
                            det(the(plu)),
                            [],
                            country),
                         [ reduced_rel(Wh1,
                              s(np(3+plu,
                                    wh(Wh1),
                                    []),
                                 verb(border, active, inf,
                                    [prog],
                                    pos),
                                 [ arg(dir,
                                      np(3+sin,
                                         name(baltic),
                                         [])) ],
                                 [])) ])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof3]) :-
   setof(
      ':'(
         [Country],
         Setof),
      (country(Country) ,
       (borders(Country,baltic) ,
        setof(Capital,
           capital(Country,Capital),
           Setof))),
      Setof3).

Planning: 0.0sec.
planned_same.
-----------
[[denmark]:[copenhagen],[east_germany]:[east_berlin],[finland]:[helsinki],[poland]:[warsaw],[soviet_union]:[moscow],[sweden]:[stockholm],[west_germany]:[bonn]].

Reply: 0.0sec.
------------------------------------------------------

is there some ocean that does not border any country ?

Parse: 0.0sec.
sent_to_prelogic(
   q(s(there,
        verb(be, active, pres+fin, [],
           pos),
        [ arg(dir,
             np(3+sin,
                np_head(
                   det(some),
                   [],
                   ocean),
                [ rel(Wh,
                     s(np(3+sin,
                           wh(Wh),
                           []),
                        verb(border, active, pres+fin, [],
                           neg),
                        [ arg(dir,
                             np(3+sin,
                                np_head(
                                   det(any),
                                   [],
                                   country),
                                [])) ],
                        [])) ])) ],
        [])),
   Prelogic).

Semantics: 0.0009999999999998899sec.
answer([]) :-
   '^'(Ocean,
      (ocean(Ocean) ,
       '\+'('^'(Borders_Country,
               (country(Borders_Country) ,
                borders(Ocean,Borders_Country)))))).

Planning: 0.0sec.
answer([]) :-
   '^'(Ocean,
      {}((ocean(Ocean) ,
          {}('\+'('^'(Country_Borders,
                     (borders(Ocean,Country_Borders) ,
                      {}(country(Country_Borders))))))))).
-----------
Yes.

Reply: 0.0sec.
------------------------------------------------------

is there more than one country in each continent ?

Parse: 0.001000000000000334sec.
sent_to_prelogic(
   q(s(there,
        verb(be, active, pres+fin, [],
           pos),
        [ arg(dir,
             np(3+sin,
                np_head(
                   quant(more,
                      nb(1)),
                   [],
                   country),
                [ prep_phrase(prep(in),
                     np(3+sin,
                        np_head(
                           det(each),
                           [],
                           continent),
                        [])) ])) ],
        [])),
   Prelogic).

Semantics: 0.0sec.
answer([]) :-
   '\+'('^'(Continent,
           (continent(Continent) ,
            '\+'('^'(Numberof,
                    (numberof(Country,
                        (country(Country) ,
                         in(Country,Continent)),
                        Numberof) ,
                     Numberof>1)))))).

Planning: 0.0sec.
planned_same.
-----------
No.

Reply: 0.0sec.
------------------------------------------------------

how many rivers are not in asia ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            np_head(
               quant(same,
                  wh(Wh)),
               [],
               river),
            []),
         verb(be, active, pres+fin, [],
            neg),
         [ arg(pred,
              prep_phrase(prep(in),
                 np(3+sin,
                    name(asia),
                    []))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Numberof]) :-
   numberof(River,
      (river(River) ,
       '\+'(in(River,asia))),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(River,
      (river(River) ,
       {}('\+'(in(River,asia)))),
      Numberof).
-----------
25.

Reply: 0.0sec.
------------------------------------------------------

how many rivers are in asia ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            np_head(
               quant(same,
                  wh(Wh)),
               [],
               river),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(pred,
              prep_phrase(prep(in),
                 np(3+sin,
                    name(asia),
                    []))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Numberof]) :-
   numberof(River,
      (river(River) ,
       in(River,asia)),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(River,
      (in(River,asia) ,
       {}(river(River))),
      Numberof).
-----------
16.

Reply: 0.0sec.
------------------------------------------------------

how many countries does the danube flow through ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            name(danube),
            []),
         verb(flow, active, pres+fin, [],
            pos),
         [],
         [ prep_phrase(prep(through),
              np(3+plu,
                 np_head(
                    quant(same,
                       wh(Wh)),
                    [],
                    country),
                 [])) ])),
   Prelogic).

Semantics: 0.0sec.
answer([Numberof]) :-
   numberof(Flows_Country,
      (country(Flows_Country) ,
       flows(danube,Flows_Country)),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(Country_Flows,
      (flows(danube,Country_Flows) ,
       {}(country(Country_Flows))),
      Numberof).
-----------
6.

Reply: 0.0sec.
------------------------------------------------------

how large is the smallest american country ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+sin,
            np_head(
               det(the(sin)),
               [ sup(most,
                    adj(small)),
                 adj(american) ],
               country),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(pred,
              value(
                 adj(large),
                 wh(Wh))) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Area5]) :-
   '^'(Aggregate,
      ('^'(Setof,
          (setof(
              Area:American_Country,
              (country(American_Country) ,
               (area(American_Country,Area) ,
                american(American_Country))),
              Setof) ,
           aggregate(min,Setof,Aggregate))) ,
       area(Aggregate,Area5))).

Planning: 0.0009999999999998899sec.
answer([Area5]) :-
   '^'(Aggregate,
      '^'(Setof,
         (setof(
             Area:Country_American,
             (american(Country_American) ,
              ({}(country(Country_American)) ,
               area(Country_American,Area))),
             Setof) ,
          (aggregate(min,Setof,Aggregate) ,
           area(Aggregate,Area5))))).
-----------
0 ksqmiles.

Reply: 0.0sec.
------------------------------------------------------

does afghanistan border china ?

Parse: 0.0sec.
sent_to_prelogic(
   q(s(np(3+sin,
           name(afghanistan),
           []),
        verb(border, active, pres+fin, [],
           pos),
        [ arg(dir,
             np(3+sin,
                name(china),
                [])) ],
        [])),
   Prelogic).

Semantics: 0.0sec.
answer([]) :-
   borders(afghanistan,china).

Planning: 0.0sec.
answer([]) :-
   {}(borders(afghanistan,china)).
-----------
Yes.

Reply: 0.0sec.
------------------------------------------------------

how many countries have a population greater than 10 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            np_head(
               quant(same,
                  wh(Wh)),
               [],
               country),
            []),
         verb(have, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    population),
                 [ reduced_rel(Wh1,
                      s(np(3+sin,
                            wh(Wh1),
                            []),
                         verb(be, active, pres+fin, [],
                            pos),
                         [ arg(pred,
                              comp(more,
                                 adj(great),
                                 np(3+plu,
                                    np_head(
                                       quant(same,
                                          nb(10)),
                                       [],
                                       million),
                                    []))) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Numberof]) :-
   numberof(Country,
      (country(Country) ,
       '^'(Population,
          ('^'(Exceeds,
              (exceeds(
                  10--million,
                  Exceeds) ,
               '^'(Exceeds2,
                  (exceeds(Population,Exceeds2) ,
                   exceeds(Exceeds2,Exceeds))))) ,
           population(Country,Population)))),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(Country,
      '^'(Population,
         '^'(Exceeds,
            '^'(Exceeds3,
               (country(Country) ,
                {}((population(Country,Population) ,
                    {}((exceeds(
                           10--million,
                           Exceeds) ,
                        {}((exceeds(Population,Exceeds3) ,
                            {}(exceeds(Exceeds3,Exceeds)))))))))))),
      Numberof).
-----------
24.

Reply: 0.009999999999999787sec.
------------------------------------------------------

how many countries have a population exceeding 10 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            np_head(
               quant(same,
                  wh(Wh)),
               [],
               country),
            []),
         verb(have, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    population),
                 [ reduced_rel(Wh1,
                      s(np(3+sin,
                            wh(Wh1),
                            []),
                         verb(exceed, active, inf,
                            [prog],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(same,
                                       nb(10)),
                                    [],
                                    million),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0009999999999998899sec.
answer([Numberof]) :-
   numberof(Country,
      (country(Country) ,
       '^'(Population,
          (exceeds(Population,
              10--million) ,
           population(Country,Population)))),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(Country,
      '^'(Population,
         (country(Country) ,
          {}((population(Country,Population) ,
              {}(exceeds(Population,
                    10--million)))))),
      Numberof).
-----------
2.

Reply: 0.0sec.
------------------------------------------------------

how many asian countries have a population exceeding 10 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            np_head(
               quant(same,
                  wh(Wh)),
               [ adj(asian) ],
               country),
            []),
         verb(have, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+sin,
                 np_head(
                    det(a),
                    [],
                    population),
                 [ reduced_rel(Wh1,
                      s(np(3+sin,
                            wh(Wh1),
                            []),
                         verb(exceed, active, inf,
                            [prog],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(same,
                                       nb(10)),
                                    [],
                                    million),
                                 [])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Numberof]) :-
   numberof(Asian_Country,
      (country(Asian_Country) ,
       (asian(Asian_Country) ,
        '^'(Population,
           (exceeds(Population,
               10--million) ,
            population(Asian_Country,Population))))),
      Numberof).

Planning: 0.0sec.
answer([Numberof]) :-
   numberof(Country_Asian,
      '^'(Population,
         (asian(Country_Asian) ,
          ({}(country(Country_Asian)) ,
           {}((population(Country_Asian,Population) ,
               {}(exceeds(Population,
                     10--million))))))),
      Numberof).
-----------
1.

Reply: 0.0sec.
------------------------------------------------------

what are the continents containing a country in which contains more than two
cities whose population exceeds 1 million ?

Parse: 0.0009999999999998899sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ reduced_rel(Wh1,
                      s(np(3+plu,
                            wh(Wh1),
                            []),
                         verb(contain, active, inf,
                            [prog],
                            pos),
                         [],
                         [])),
                   rel(Wh2,
                      s(np(3+sin,
                            np_head(
                               det(a),
                               [],
                               country),
                            [ prep_phrase(prep(in),
                                 np(3+plu,
                                    wh(Wh2),
                                    [])) ]),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ rel(Wh3,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh3),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      ('^'(_13442,
          (continent(Continent) ,
           in(_13442,Continent))) ,
       '^'(In_Country,
          (country(In_Country) ,
           (in(In_Country,Continent) ,
            '^'(Numberof,
               (numberof(City,
                   (city(City) ,
                    ('^'(Population,
                        (population(City,Population) ,
                         exceeds(Population,
                            1--million))) ,
                     in(City,In_Country))),
                   Numberof) ,
                Numberof>2)))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
Nothing satisfies your question.


Reply: 1.996sec.
------------------------------------------------------

what are the continents containing no country in which contains more than
two cities whose population exceeds 1 million ?

Parse: 0.001000000000000334sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ reduced_rel(Wh1,
                      s(np(3+plu,
                            wh(Wh1),
                            []),
                         verb(contain, active, inf,
                            [prog],
                            pos),
                         [],
                         [])),
                   rel(Wh2,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               country),
                            [ prep_phrase(prep(in),
                                 np(3+plu,
                                    wh(Wh2),
                                    [])) ]),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ rel(Wh3,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh3),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      ('^'(_13464,
          (continent(Continent) ,
           in(_13464,Continent))) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                (in(In_Country,Continent) ,
                 '^'(Numberof,
                    (numberof(City,
                        (city(City) ,
                         ('^'(Population,
                             (population(City,Population) ,
                              exceeds(Population,
                                 1--million))) ,
                          in(City,In_Country))),
                        Numberof) ,
                     Numberof>2))))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[asia].

Reply: 1.9980000000000002sec.
------------------------------------------------------

what are the continents containing no countries in which contain more than
two cities whose population exceeds 1 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ reduced_rel(Wh1,
                      s(np(3+plu,
                            wh(Wh1),
                            []),
                         verb(contain, active, inf,
                            [prog],
                            pos),
                         [],
                         [])),
                   rel(Wh2,
                      s(np(3+plu,
                            np_head(
                               det(no),
                               [],
                               country),
                            [ prep_phrase(prep(in),
                                 np(3+plu,
                                    wh(Wh2),
                                    [])) ]),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ rel(Wh3,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh3),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof]) :-
   setof(Continent,
      ('^'(_13482,
          (continent(Continent) ,
           in(_13482,Continent))) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                (in(In_Country,Continent) ,
                 '^'(Numberof,
                    (numberof(City,
                        (city(City) ,
                         ('^'(Population,
                             (population(City,Population) ,
                              exceeds(Population,
                                 1--million))) ,
                          in(City,In_Country))),
                        Numberof) ,
                     Numberof>2))))))),
      Setof).

Planning: 0.0sec.
planned_same.
-----------
[asia].

Reply: 2.0sec.
------------------------------------------------------

what are the continents in which no country contains more than two cities
whose populations exceed 1 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Wh,
      s(np(3+plu,
            wh(Wh),
            []),
         verb(be, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(the(plu)),
                    [],
                    continent),
                 [ rel(Wh1,
                      s(np(3+sin,
                            np_head(
                               det(no),
                               [],
                               country),
                            []),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ prep_phrase(prep(in),
                                      np(3+plu,
                                         wh(Wh1),
                                         [])),
                                   rel(Wh2,
                                      s(np(3+plu,
                                            np_head(
                                               det(the(plu)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh2),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Setof7]) :-
   setof(Continent,
      (continent(Continent) ,
       '\+'('^'(In_Country,
               (country(In_Country) ,
                '^'(Numberof,
                   (numberof(City,
                       (city(City) ,
                        (in(City,Continent) ,
                         ('^'(Setof,
                             (setof(Population,
                                 population(City,Population),
                                 Setof) ,
                              exceeds(Setof,
                                 1--million))) ,
                          in(City,In_Country)))),
                       Numberof) ,
                    Numberof>2)))))),
      Setof7).

Planning: 0.0sec.
planned_same.
-----------
[africa,america,antarctica,asia,australasia,europe].

Reply: 0.12600000000000122sec.
------------------------------------------------------

which continents contain no countries which contain more than two cities whose
population exceeds 1 million ?

Parse: 0.0sec.
sent_to_prelogic(
   whq(Det,
      s(np(3+plu,
            np_head(
               int_det(Det),
               [],
               continent),
            []),
         verb(contain, active, pres+fin, [],
            pos),
         [ arg(dir,
              np(3+plu,
                 np_head(
                    det(no),
                    [],
                    country),
                 [ rel(Wh,
                      s(np(3+plu,
                            wh(Wh),
                            []),
                         verb(contain, active, pres+fin, [],
                            pos),
                         [ arg(dir,
                              np(3+plu,
                                 np_head(
                                    quant(more,
                                       nb(2)),
                                    [],
                                    city),
                                 [ rel(Wh2,
                                      s(np(3+sin,
                                            np_head(
                                               det(the(sin)),
                                               [],
                                               population),
                                            [ prep_phrase(poss,
                                                 np(3+plu,
                                                    wh(Wh2),
                                                    [])) ]),
                                         verb(exceed, active, pres+fin, [],
                                            pos),
                                         [ arg(dir,
                                              np(3+sin,
                                                 np_head(
                                                    quant(same,
                                                       nb(1)),
                                                    [],
                                                    million),
                                                 [])) ],
                                         [])) ])) ],
                         [])) ])) ],
         [])),
   Prelogic).

Semantics: 0.0sec.
answer([Continent]) :-
   (continent(Continent) ,
    '\+'('^'(In_Country,
            (country(In_Country) ,
             ('^'(Numberof,
                 (numberof(City,
                     (city(City) ,
                      ('^'(Population,
                          (population(City,Population) ,
                           exceeds(Population,
                              1--million))) ,
                       in(City,In_Country))),
                     Numberof) ,
                  Numberof>2)) ,
              in(In_Country,Continent)))))).

Planning: 0.0sec.
planned_same.
-----------
africa, america, antarctica, asia, australasia and europe.

Reply: 0.14700000000000024sec.
------------------------------------------------------

bye .
Cheerio.
true.

?- ^D
% halt
(base) root@debian10:/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/ext/chat80/original#


